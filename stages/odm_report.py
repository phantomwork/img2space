import os
import json
import math
import shutil

from opendm import log
from opendm import io
from opendm import system
from opendm import types
from opendm.shots import get_geojson_shots_from_opensfm
from opendm.osfm import OSFMContext
from opendm import gsd
from opendm.point_cloud import export_summary_json


def hms(seconds):
    h = seconds // 3600
    m = seconds % 3600 // 60
    s = seconds % 3600 % 60
    if h > 0:
        return '{}h:{}m:{}s'.format(h, m, s)
    elif m > 0:
        return '{}m:{}s'.format(m, s)
    else:
        return '{}s'.format(s)


def generate_point_cloud_stats(input_point_cloud, pc_summary_file):
    if not os.path.exists(pc_summary_file):
        export_summary_json(input_point_cloud, pc_summary_file)

    if os.path.exists(pc_summary_file):
        with open(pc_summary_file, 'r') as f:
            return json.loads(f.read())

class ODMReport(types.ODM_Stage):
    def process(self, args, outputs):
        tree = outputs['tree']
        reconstruction = outputs['reconstruction']

        if not os.path.exists(tree.odm_report): system.mkdir_p(tree.odm_report)

        log.ODM_INFO("Exporting shots.geojson")

        shots_geojson = os.path.join(tree.odm_report, "shots.geojson")
        if not io.file_exists(shots_geojson) or self.rerun():
            # Extract geographical camera shots
            if reconstruction.is_georeferenced():
                shots = get_geojson_shots_from_opensfm(tree.opensfm_reconstruction, tree.opensfm_transformation, reconstruction.get_proj_srs())    
            else:
                # Pseudo geo
                shots = get_geojson_shots_from_opensfm(tree.opensfm_reconstruction, pseudo_geotiff=tree.odm_orthophoto_tif)

            if shots:
                with open(shots_geojson, "w") as fout:
                    fout.write(json.dumps(shots))

                log.ODM_INFO("Wrote %s" % shots_geojson)
            else:
                log.ODM_WARNING("Cannot extract shots")
        else:
            log.ODM_WARNING('Found a valid shots file in: %s' % shots_geojson)
        
        # Augment OpenSfM stats file with our own stats
        odm_stats_json = os.path.join(tree.odm_report, "stats.json")
        octx = OSFMContext(tree.opensfm)
        osfm_stats_json = octx.path("stats", "stats.json")
        odm_stats = None
        point_cloud_file = None
        views_dimension = None

        if not os.path.exists(odm_stats_json) or self.rerun():
            if os.path.exists(osfm_stats_json):
                with open(osfm_stats_json, 'r') as f:
                    odm_stats = json.loads(f.read())

                # Add point cloud stats
                if os.path.exists(tree.odm_georeferencing_model_laz):
                    point_cloud_file = tree.odm_georeferencing_model_laz
                    views_dimension = "UserData"

                    # pc_summary_file should have been generated by cropper
                    pc_summary_file = os.path.join(tree.odm_georeferencing, "odm_georeferenced_model.summary.json")
                    odm_stats['point_cloud_statistics'] = generate_point_cloud_stats(tree.odm_georeferencing_model_laz, pc_summary_file)
                else:
                    ply_pc = os.path.join(tree.odm_filterpoints, "point_cloud.ply")
                    if os.path.exists(ply_pc):
                        point_cloud_file = ply_pc
                        views_dimension = "views"

                        pc_summary_file = os.path.join(tree.odm_filterpoints, "point_cloud.summary.json")
                        odm_stats['point_cloud_statistics'] = generate_point_cloud_stats(ply_pc, pc_summary_file)
                    else:
                        log.ODM_WARNING("No point cloud found")

                odm_stats['point_cloud_statistics']['dense'] = not args.fast_orthophoto

                # Add runtime stats
                odm_stats['odm_processing_statistics'] = {
                    'total_time': (system.now_raw() - outputs['start_time']).total_seconds(),
                    'total_time_human': hms(121),
                    'average_gsd': gsd.opensfm_reconstruction_average_gsd(octx.recon_file(), use_all_shots=reconstruction.has_gcp()),
                }

                with open(odm_stats_json, 'w') as f:
                    f.write(json.dumps(odm_stats))
            else:
                log.ODM_WARNING("Cannot generate report, OpenSfM stats are missing")
        else:
            log.ODM_WARNING("Reading existing stats %s" % odm_stats_json)
            with open(odm_stats_json, 'r') as f:
                odm_stats = json.loads(f.read())

        # Generate overlap diagram
        if odm_stats.get('point_cloud_statistics') and point_cloud_file and views_dimension:
            bounds = odm_stats['point_cloud_statistics'].get('summary', {}).get('bounds')
            if bounds:
                diagram_target_size = 1600 # pixels
                osfm_stats_dir = os.path.join(tree.opensfm, "stats")
                diagram_tiff = os.path.join(osfm_stats_dir, "overlap.tif")
                diagram_png = os.path.join(osfm_stats_dir, "overlap.png")

                width = bounds.get('maxx') - bounds.get('minx')
                height = bounds.get('maxy') - bounds.get('miny')
                max_dim = max(width, height)
                resolution = float(max_dim) / float(diagram_target_size)
                radius = resolution * math.sqrt(2)

                # Larger radius for sparse point cloud diagram
                if not odm_stats['point_cloud_statistics']['dense']:
                    radius *= 10

                system.run("pdal translate -i \"{}\" "
                            "-o \"{}\" "
                            "--writer gdal "
                            "--writers.gdal.resolution={} "
                            "--writers.gdal.data_type=uint8_t "
                            "--writers.gdal.dimension={} "
                            "--writers.gdal.output_type=max "
                            "--writers.gdal.radius={} ".format(point_cloud_file, diagram_tiff, 
                                                                    resolution, views_dimension, radius))
                report_assets = os.path.abspath(os.path.join(os.path.dirname(__file__), "../opendm/report"))
                overlap_color_map = os.path.join(report_assets, "overlap_color_map.txt")
                system.run("gdaldem color-relief \"{}\" \"{}\" \"{}\" -of PNG -alpha".format(diagram_tiff, overlap_color_map, diagram_png))

                # Copy legend
                shutil.copy(os.path.join(report_assets, "overlap_diagram_legend.png"), os.path.join(osfm_stats_dir, "overlap_diagram_legend.png"))
            else:
                log.ODM_WARNING("Cannot generate overlap diagram, cannot compute point cloud bounds")
        else:
            log.ODM_WARNING("Cannot generate overlap diagram, point cloud stats missing")

        octx.export_report(os.path.join(tree.odm_report, "report.pdf"), odm_stats, self.rerun())